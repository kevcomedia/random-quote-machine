{"version":3,"sources":["Quote.js","Icon.js","NewQuoteButton.js","TweetLink.js","QuoteMachine.js","fetchQuote.js","serviceWorker.js","index.js"],"names":["Quote","props","react_default","a","createElement","className","dangerouslySetInnerHTML","__html","quote","author","iconTypes","solid","brand","Icon","classes","concat","type","name","spin","aria-hidden","defaultProps","NewQuoteButton","icon","disabled","src_Icon","onClick","TweetLink","tweetParam","htmlString","el","document","innerHTML","trim","textContent","stripHTML","tweetURL","encodeURIComponent","href","target","rel","aria-label","QuoteMachine","_useState","useState","_useState2","Object","slicedToArray","setQuote","_useState3","_useState4","setAuthor","_useState5","_useState6","isFetching","setIsFetching","_useState7","_useState8","errorMessage","setErrorMessage","handleQuoteFetch","Promise","resolve","race","axios","get","Date","getTime","responseType","then","_ref","data","content","title","_","reject","setTimeout","timeout","err","console","error","useEffect","src_Quote","src_NewQuoteButton","src_TweetLink","Boolean","window","location","hostname","match","ReactDOM","render","src_QuoteMachine","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af5c801d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Quote.css';\n\nfunction Quote(props) {\n  return (\n    <blockquote className=\"quote\">\n      <div\n        className=\"quote__content\"\n        dangerouslySetInnerHTML={{ __html: props.quote }}\n      />\n      {props.author && <p className=\"quote__author\">{props.author}</p>}\n    </blockquote>\n  );\n}\n\nQuote.propTypes = {\n  quote: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n};\n\nexport default Quote;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst iconTypes = {\n  solid: 'fas',\n  brand: 'fab',\n}\n\nfunction Icon(props) {\n  let classes = `${iconTypes[props.type]} fa-fw fa-${props.name}`;\n  if (props.spin) {\n    classes += ' fa-spin';\n  }\n  return <span className={classes} aria-hidden=\"true\" />;\n}\n\nIcon.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  spin: PropTypes.bool,\n};\n\nIcon.defaultProps = {\n  type: 'solid',\n  spin: false,\n}\n\nexport default Icon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from './Icon';\n\nfunction NewQuoteButton(props) {\n  const icon = props.disabled ? (\n    <Icon name=\"circle-notch\" spin />\n  ) : (\n    <Icon name=\"quote-left\" />\n  );\n\n  return (\n    <button className=\"btn\" disabled={props.disabled} onClick={props.onClick}>\n      {icon} New Quote\n    </button>\n  );\n}\n\nNewQuoteButton.propTypes = {\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func.isRequired,\n};\n\nNewQuoteButton.defaultProps = {\n  disabled: false,\n};\n\nexport default NewQuoteButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from './Icon';\n\nfunction TweetLink(props) {\n  let tweetParam = stripHTML(props.quote);\n  if (props.author) {\n    tweetParam += ` â€” ${props.author}`;\n  }\n\n  const tweetURL = `https://twitter.com/intent/tweet?text=${encodeURIComponent(\n    tweetParam,\n  )}`;\n  return (\n    <a\n      className=\"btn\"\n      href={tweetURL}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      aria-label=\"Tweet this quote\"\n    >\n      <Icon name=\"twitter\" type=\"brand\" />\n    </a>\n  );\n}\n\nTweetLink.propTypes = {\n  quote: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n};\n\nfunction stripHTML(htmlString) {\n  const el = document.createElement('div');\n  el.innerHTML = htmlString.trim();\n  return el.textContent;\n}\n\nexport default TweetLink;\n","import React, { useState, useEffect } from 'react';\nimport Quote from './Quote';\nimport NewQuoteButton from './NewQuoteButton';\nimport TweetLink from './TweetLink';\nimport fetchQuote from './fetchQuote';\nimport './QuoteMachine.css';\n\nfunction QuoteMachine(props) {\n  const [quote, setQuote] = useState('');\n  const [author, setAuthor] = useState('');\n  const [isFetching, setIsFetching] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleQuoteFetch = () => {\n    new Promise((resolve) => {\n      setIsFetching(true);\n      setErrorMessage('');\n      resolve(fetchQuote());\n    }).then(\n      ({ quote, author }) => {\n        setQuote(quote);\n        setAuthor(author);\n        setIsFetching(false);\n      },\n      (err) => {\n        if (err.timeout) {\n          setErrorMessage('Request timed out. Please try again');\n        } else {\n          setErrorMessage(\"Couldn't fetch quote. Please try again\");\n        }\n        setIsFetching(false);\n        console.error(err);\n      },\n    );\n  };\n\n  useEffect(handleQuoteFetch, []);\n\n  return (\n    <div className=\"quote-machine\">\n      {errorMessage ? (\n        <p>{errorMessage}</p>\n      ) : (\n        <Quote quote={quote} author={author} />\n      )}\n      <NewQuoteButton disabled={isFetching} onClick={handleQuoteFetch} />\n      <TweetLink quote={quote} author={author} />\n    </div>\n  );\n}\n\nexport default QuoteMachine;\n","import axios from 'axios';\n\nexport default function fetchQuote() {\n  return Promise.race([\n    axios\n      .get(\n        // timestamp parameter prevents from caching the previous quote\n        `https://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1&timestamp=${new Date().getTime()}`,\n        { responseType: 'json' },\n      )\n      .then(({ data }) => ({\n        quote: data[0].content, // content has HTML embedded in it\n        author: data[0].title,\n      })),\n    new Promise((_, reject) => {\n      setTimeout(() => reject({ timeout: true }), 10000);\n    }),\n  ]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuoteMachine from './QuoteMachine';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<QuoteMachine />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}